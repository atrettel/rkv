#!/usr/bin/env python3

# Copyright (C) 2020 Andrew Trettel

import os.path
import sqlite3
import sys

DEFAULT_DATABASE      = "references.db"
DEFAULT_LANGUAGE      = "eng"
DEFAULT_PDFVIEWER     = "zathura"
DEFAULT_REPOSITORY    = "./"
DEFAULT_DOCUMENT_TYPE = "BOOK"

NO_LANGUAGE_CODE = "zxx"

class multiple_type:
    name               = None
    RIS_type           = None
    bibtex_type        = None
    language_dependent = None

    def __init__( self, name, RIS_type, bibtex_type, language_dependent=True, ):
        self.name               = str(name)
        self.RIS_type           = RIS_type
        self.bibtex_type        = bibtex_type
        self.language_dependent = bool(language_dependent)

DEFAULT_DOCUMENT_TYPES = {}
DEFAULT_DOCUMENT_TYPES[ "BOOK"    ] = multiple_type( "book",                   "BOOK",   "book",          )
DEFAULT_DOCUMENT_TYPES[ "BOOKLET" ] = multiple_type( "booklet",                "UNPB",   "booklet",       )
DEFAULT_DOCUMENT_TYPES[ "CHAP"    ] = multiple_type( "chapter",                "CHAP",   "incollection",  )
DEFAULT_DOCUMENT_TYPES[ "CPAPER"  ] = multiple_type( "conference paper",       "CPAPER", "inproceedings", )
DEFAULT_DOCUMENT_TYPES[ "CONF"    ] = multiple_type( "conference proceedings", "CONF",   "proceedings",   )
DEFAULT_DOCUMENT_TYPES[ "DATA"    ] = multiple_type( "database",               "DATA",   "misc",          )
DEFAULT_DOCUMENT_TYPES[ "DICT"    ] = multiple_type( "dictionary",             "DICT",   "misc",          )
DEFAULT_DOCUMENT_TYPES[ "JFULL"   ] = multiple_type( "journal",                "JFULL",  "misc",          )
DEFAULT_DOCUMENT_TYPES[ "JOUR"    ] = multiple_type( "journal article",        "JOUR",   "article",       )
DEFAULT_DOCUMENT_TYPES[ "MTHES"   ] = multiple_type( "masters thesis",         "THES",   "mastersthesis", )
DEFAULT_DOCUMENT_TYPES[ "PAT"     ] = multiple_type( "patent",                 "PAT",    "misc",          )
DEFAULT_DOCUMENT_TYPES[ "PTHES"   ] = multiple_type( "phd dissertation",       "THES",   "phdthesis",     )
DEFAULT_DOCUMENT_TYPES[ "RPRT"    ] = multiple_type( "report",                 "RPRT",   "techreport",    )
DEFAULT_DOCUMENT_TYPES[ "SER"     ] = multiple_type( "serial",                 "SER",    "misc",          )
DEFAULT_DOCUMENT_TYPES[ "STAND"   ] = multiple_type( "standard",               "STAND",  "misc",          )
DEFAULT_DOCUMENT_TYPES[ "UNPB"    ] = multiple_type( "unpublished",            "UNPB",   "unpublished",   )

DEFAULT_FIELD_TYPES = {}
DEFAULT_FIELD_TYPES[ "abstract"    ] = multiple_type( "abstract",                           "AB", "abstract",    language_dependent=True,  )
DEFAULT_FIELD_TYPES[ "author"      ] = multiple_type( "author",                             "AU", "author",      language_dependent=True,  )
DEFAULT_FIELD_TYPES[ "booktitle"   ] = multiple_type( "book title",                         "BT", "booktitle",   language_dependent=True,  )
DEFAULT_FIELD_TYPES[ "chapter"     ] = multiple_type( "chapter number",                     None, "chapter",     language_dependent=False, )
DEFAULT_FIELD_TYPES[ "date"        ] = multiple_type( "date",                               "DA", "date",        language_dependent=False, )
DEFAULT_FIELD_TYPES[ "doi"         ] = multiple_type( "DOI",                                "DO", "doi",         language_dependent=False, )
DEFAULT_FIELD_TYPES[ "edition"     ] = multiple_type( "edition",                            "ET", "edition",     language_dependent=False, )
DEFAULT_FIELD_TYPES[ "editor"      ] = multiple_type( "editor",                             "ED", "editor",      language_dependent=True,  )
DEFAULT_FIELD_TYPES[ "institution" ] = multiple_type( "institution",                        None, "institution", language_dependent=True,  )
DEFAULT_FIELD_TYPES[ "isbn"        ] = multiple_type( "ISBN",                               "SN", "isbn",        language_dependent=False, )
DEFAULT_FIELD_TYPES[ "issn"        ] = multiple_type( "ISSN",                               "SN", "isbn",        language_dependent=False, )
DEFAULT_FIELD_TYPES[ "issue"       ] = multiple_type( "issue number",                       "IS", "issue",       language_dependent=False, )
DEFAULT_FIELD_TYPES[ "journal"     ] = multiple_type( "journal name",                       "JO", "journal",     language_dependent=True,  )
DEFAULT_FIELD_TYPES[ "lccn"        ] = multiple_type( "Library of Congress Control Number", None, None,          language_dependent=False, )
DEFAULT_FIELD_TYPES[ "oclc"        ] = multiple_type( "OCLC Control Number",                None, None,          language_dependent=False, )
DEFAULT_FIELD_TYPES[ "publisher"   ] = multiple_type( "publisher",                          "PB", "publisher",   language_dependent=True,  )
DEFAULT_FIELD_TYPES[ "school"      ] = multiple_type( "school",                             None, "school",      language_dependent=True,  )
DEFAULT_FIELD_TYPES[ "title"       ] = multiple_type( "title",                              "TI", "title",       language_dependent=True,  )
DEFAULT_FIELD_TYPES[ "url"         ] = multiple_type( "URL",                                "UR", "url",         language_dependent=False, )
DEFAULT_FIELD_TYPES[ "volume"      ] = multiple_type( "volume number",                      "VL", "volume",      language_dependent=False, )

def add_citation( cursor, citation_key, options, modify=False ):
    document_type = DEFAULT_DOCUMENT_TYPE
    if ( "type" in options ):
        document_type = options["type"]

    language = DEFAULT_LANGUAGE
    if ( "language" in options ):
        language = options["language"]

    if ( modify==False and key_exists( cursor, citation_key ) ):
        print( "rkv: citation key '{:s}' already exists".format(
            citation_key
        ) )
    else:
        cursor.execute(
        """
        INSERT INTO documents( citation_key, document_type, language )
        VALUES( ?, ?, ? );
        """,
        ( citation_key, document_type, language, ) )
        print( "rkv: add '{:s}'".format( citation_key ) )

    sql_query = """
    INSERT INTO fields( citation_key, field_type, language, value )
    VALUES( ?, ?, ?, ? );
    """
    if ( modify ):
        sql_query = """
        UPDATE fields
        WHERE citation_key=?, field_type=?, language=?
        SET value=?;
        """

    ignored_fields = [ "key", "language", "type", ]
    for field in options:
        if ( field not in ignored_fields ):
            cursor.execute(
                sql_query,
                ( citation_key, field, language, options[field], )
            )

def field_type_depends_on_language( cursor, field_type ):
    cursor.execute(
    """
    SELECT language_dependent FROM field_types WHERE field_type=?;
    """,
    ( field_type, ) )
    result = cursor.fetchone()
    return ( result[0] == 1 )

def init_database( database ):
    conn = sqlite3.connect( database )
    cursor = conn.cursor()

    cursor.execute( "PRAGMA foreign_keys = ON;" )

    # Consider some additional tables: authors/editors/etc. of documents, and
    # individual people.  A single table for both could work for
    # authors/editors/etc., provided a "linking" field like the ORCID iD is
    # also there.

    cursor.execute(
    """
    CREATE TABLE security_classification_levels (
    identifier       TEXT PRIMARY KEY UNIQUE,
    country          TEXT NOT NULL,
    equivalent_level TEXT DEFAULT NULL,
    name             TEXT NOT NULL
    );
    """
    )

    cursor.execute(
    """
    CREATE TABLE classification_systems (
    identifier  TEXT PRIMARY KEY UNIQUE,
    name        TEXT NOT NULL
    );
    """
    )
    # LCC, UDC

    cursor.execute(
    """
    CREATE TABLE distribution_statements (
    identifier  TEXT PRIMARY KEY UNIQUE,
    name        TEXT NOT NULL
    );
    """
    )

    cursor.execute(
    """
    CREATE TABLE document_collections (
    identifier  TEXT PRIMARY KEY UNIQUE,
    name        TEXT NOT NULL
    );
    """
    )

    # Use to specify journal/article relations, etc.
    cursor.execute(
    """
    CREATE TABLE document_relations (
    citation_key1  TEXT NOT NULL,
    citation_key2  TEXT NOT NULL,
    relation       TEXT NOT NULL,
    PRIMARY KEY( citation_key1, citation_key2, relation )
    );
    """
    )

    cursor.execute(
    """
    CREATE TABLE document_types (
    document_type  TEXT PRIMARY KEY UNIQUE,
    type_name      TEXT NOT NULL,
    RIS_type       TEXT NOT NULL,
    bibtex_type    TEXT NOT NULL
    );
    """
    )

    for document_type in DEFAULT_DOCUMENT_TYPES:
        cursor.execute(
        """
        INSERT INTO document_types
        VALUES( ?, ?, ?, ? );
        """,
        (
            document_type,
            DEFAULT_DOCUMENT_TYPES[document_type].name,
            DEFAULT_DOCUMENT_TYPES[document_type].RIS_type,
            DEFAULT_DOCUMENT_TYPES[document_type].bibtex_type,
        )
        )

    cursor.execute(
    """
    CREATE TABLE field_types (
    field_type         TEXT PRIMARY KEY UNIQUE,
    type_name          TEXT NOT NULL,
    RIS_type           TEXT DEFAULT NULL,
    bibtex_type        TEXT DEFAULT NULL,
    language_dependent INTEGER NOT NULL DEFAULT 1
    );
    """
    )

    for field_type in DEFAULT_FIELD_TYPES:
        cursor.execute(
        """
        INSERT INTO field_types
        VALUES( ?, ?, ?, ?, ? );
        """,
        (
            field_type,
            DEFAULT_FIELD_TYPES[field_type].name,
            DEFAULT_FIELD_TYPES[field_type].RIS_type,
            DEFAULT_FIELD_TYPES[field_type].bibtex_type,
            1 if DEFAULT_FIELD_TYPES[field_type].language_dependent else 0,
        )
        )

    cursor.execute(
    """
    CREATE TABLE documents (
    citation_key  TEXT PRIMARY KEY UNIQUE,
    document_type TEXT NOT NULL,
    language      TEXT NOT NULL,
    notes         TEXT DEFAULT NULL,
    FOREIGN KEY(document_type) REFERENCES document_types(document_type)
    );
    """
    )

    cursor.execute(
    """
    CREATE TABLE dates (
    citation_key TEXT NOT NULL,
    date_type    TEXT DEFAULT NULL,
    year         INTEGER NOT NULL,
    month        INTEGER DEFAULT NULL,
    day          INTEGER DEFAULT NULL,
    PRIMARY KEY(citation_key, date_type),
    FOREIGN KEY(citation_key) REFERENCES documents(citation_key)
    );
    """
    )

    cursor.execute(
    """
    CREATE TABLE fields (
    citation_key TEXT NOT NULL,
    field_type   TEXT NOT NULL,
    language     TEXT NOT NULL,
    value        TEXT NOT NULL,
    PRIMARY KEY(citation_key, field_type, language),
    FOREIGN KEY(citation_key) REFERENCES documents(citation_key),
    FOREIGN KEY(field_type) REFERENCES field_types(field_type)
    );
    """
    )

    cursor.execute(
    """
    CREATE TABLE accession_numbers (
    citation_key        TEXT NOT NULL,
    document_collection TEXT NOT NULL,
    accession_number    TEXT NOT NULL,
    PRIMARY KEY(citation_key, document_collection, accession_number),
    FOREIGN KEY(citation_key) REFERENCES documents(citation_key),
    FOREIGN KEY(document_collection) REFERENCES document_collections(identifier)
    );
    """
    )

    cursor.execute(
    """
    CREATE TABLE distribution_limitations (
    citation_key           TEXT NOT NULL,
    distribution_statement TEXT NOT NULL,
    date                   TEXT NOT NULL,
    authority              TEXT DEFAULT NULL,
    changed                INTEGER NOT NULL DEFAULT 0 CHECK ( changed = 0 OR changed = 1 ),
    PRIMARY KEY(citation_key, distribution_statement, date),
    FOREIGN KEY(citation_key) REFERENCES documents(citation_key),
    FOREIGN KEY(distribution_statement) REFERENCES distribution_statements(identifier)
    );
    """
    )

    cursor.execute(
    """
    CREATE TABLE document_classifications (
    citation_key          TEXT NOT NULL,
    classification_system TEXT NOT NULL,
    classification_code   TEXT NOT NULL,
    PRIMARY KEY(citation_key, classification_system, classification_code),
    FOREIGN KEY(citation_key) REFERENCES documents(citation_key),
    FOREIGN KEY(classification_system) REFERENCES classification_systems(identifier)
    );
    """
    )

    cursor.execute(
    """
    CREATE TABLE report_codes (
    report_code           TEXT PRIMARY KEY,
    citation_key          TEXT NOT NULL,
    serial_key            TEXT DEFAULT NULL,
    FOREIGN KEY(citation_key) REFERENCES documents(citation_key)
    );
    """
    )

    cursor.execute(
    """
    CREATE TABLE security_classifications (
    citation_key          TEXT NOT NULL,
    classification_level  TEXT NOT NULL,
    date                  TEXT NOT NULL,
    authority             TEXT DEFAULT NULL,
    changed               INTEGER NOT NULL DEFAULT 0 CHECK ( changed = 0 OR changed = 1 ),
    PRIMARY KEY(citation_key, classification_level, date),
    FOREIGN KEY(citation_key) REFERENCES documents(citation_key),
    FOREIGN KEY(classification_level) REFERENCES security_classification_levels(identifier)
    );
    """
    )

    conn.commit()
    conn.close()

    print( "rkv: initialized {:s}". format( database ) )

def key_exists( cursor, citation_key ):
    cursor.execute(
    """
    SELECT citation_key FROM documents WHERE citation_key=?;
    """,
    ( citation_key, ) )
    result = cursor.fetchone()
    return ( result != None )

def list_languages_for_citation( cursor, citation_key ):
    cursor.execute(
    """
    SELECT DISTINCT language FROM fields WHERE citation_key=? ORDER BY
    language;
    """,
    ( citation_key, ) )
    result = cursor.fetchone()
    if ( result == None ):
        return []
    else:
        return list(result)

def main( argc, argv ):
    database   = DEFAULT_DATABASE
    language   = DEFAULT_LANGUAGE
    pdfviewer  = DEFAULT_PDFVIEWER
    repository = DEFAULT_REPOSITORY

    if ( argc == 1 ):
        print( "rkv: command-line reference manager" )
        print( "database   = {:s}".format( database   ) )
        print( "language   = {:s}".format( language   ) )
        print( "pdfviewer  = {:s}".format( pdfviewer  ) )
        print( "repository = {:s}".format( repository ) )
        exit(0)
    elif ( argv[1] == "init" ):
        db = database
        if ( argc > 2 ):
            db = argv[2]
        print( db )
        if ( os.path.isfile(db) ):
            print( "rkv: database {:s} already exists".format( db ) )
            exit(1)
        else:
            init_database( db )
        exit(0)

    conn   = sqlite3.connect( database )
    cursor = conn.cursor()
    cursor.execute( "PRAGMA foreign_keys = ON;" )

    if ( argv[1] == "add" ):
        add_citation( cursor, argv[2], parse_options(argv[3:argc]), modify=False, )
    elif ( argv[1] == "modify" ):
        add_citation( cursor, argv[2], parse_options(argv[3:argc]), modify=True, )
    elif ( argv[1] == "find" ):
        print( "find" )
    elif ( argv[1] == "list" ):
        print( "info" )
    elif ( argv[1] == "mv" ):
        print( "mv" )
    elif ( argv[1] == "rm" ):
        print( "rm" )
    else:
        print( "rkv: command {:s} is unknown".format( argv[1] ) )

    conn.commit()
    conn.close()
    exit(0)

def parse_options( arguments ):
    options = {}
    for argument in arguments:
        i = 0
        n = len(argument)
        while ( i < n and argument[i] != ":" ):
            i += 1
        if ( i == n ):
            options[argument] = None
        elif ( i+1 == n ):
            options[argument[0:n-1]] = None
        else:
            options[argument[0:i]] = argument[i+1:]
    return options

if __name__ == "__main__":
    main( len(sys.argv), sys.argv )
