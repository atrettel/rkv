#!/usr/bin/env python3

# Copyright (C) 2020 Andrew Trettel

import os.path
import sqlite3
import sys

DEFAULT_DATABASE   = "references.db"
DEFAULT_LANGUAGE   = "eng"
DEFAULT_PDFVIEWER  = "zathura"
DEFAULT_REPOSITORY = "./"

def add( database, citation_key, document_type, language, field_pairs ):
    if ( key_exists( database, citation_key ) ):
        print( "rkv: citation key '{:s}' already exists".format(
            citation_key ) )
    else:
        conn = sqlite3.connect( database )
        c = conn.cursor()
        c.execute(
        """
        INSERT INTO documents( citation_key, document_type, language ) VALUES(
        ?, ?, ? );
        """,
        ( citation_key, document_type, language, ) )
        conn.commit()
        conn.close()
        print( "rkv: add '{:s}'".format( citation_key ) )

    if ( language not in list_languages_for_citation(
         database, citation_key ) ):
        conn = sqlite3.connect( database )
        c = conn.cursor()
        for field_pair in field_pairs:
            i = 0
            n = len(field_pair)
            while ( i < n and field_pair[i] != ":" ):
                i += 1
            field_type = field_pair[0:i]
            if ( i == n ):
                value = ""
            else:
                value = field_pair[i+1:]

            c.execute(
            """
            INSERT INTO fields( citation_key, field_type, language, value )
            VALUES( ?, ?, ?, ? );
            """,
            ( citation_key, field_type, language, value, ) )
        conn.commit()
        conn.close()
        print( "rkv: add fields for language '{:s}'".format( language ) )

def init( database ):
    conn = sqlite3.connect( database )
    c = conn.cursor()

    c.execute(
    """
    CREATE TABLE documents (
    citation_key  TEXT PRIMARY KEY UNIQUE,
    document_type TEXT NOT NULL,
    language      TEXT NOT NULL,
    notes         TEXT DEFAULT NULL
    );
    """
    )

    c.execute(
    """
    CREATE TABLE fields (
    citation_key TEXT NOT NULL,
    field_type   TEXT NOT NULL,
    language     TEXT NOT NULL,
    value        TEXT NOT NULL,
    PRIMARY KEY(citation_key, field_type, language)
    );
    """
    )

    c.execute(
    """
    CREATE TABLE dates (
    citation_key TEXT NOT NULL,
    date_type    TEXT DEFAULT NULL,
    year         INTEGER NOT NULL,
    month        INTEGER DEFAULT NULL,
    day          INTEGER DEFAULT NULL,
    PRIMARY KEY(citation_key, date_type)
    );
    """
    )

    conn.commit()
    conn.close()

    print( "rkv: initialized {:s}". format( database ) )

def key_exists( database, citation_key ):
    conn = sqlite3.connect( database )
    c = conn.cursor()
    c.execute(
    """
    SELECT citation_key FROM documents WHERE citation_key=?;
    """,
    ( citation_key, ) )
    result = c.fetchone()
    conn.commit()
    conn.close()
    return ( result != None )

def list_languages_for_citation( database, citation_key ):
    conn = sqlite3.connect( database )
    c = conn.cursor()
    c.execute(
    """
    SELECT DISTINCT language FROM fields WHERE citation_key=? ORDER BY
    language;
    """,
    ( citation_key, ) )
    result = c.fetchone()
    conn.commit()
    conn.close()
    if ( result == None ):
        return []
    else:
        return list(result)

def main( argc, argv ):
    database   = DEFAULT_DATABASE
    language   = DEFAULT_LANGUAGE
    pdfviewer  = DEFAULT_PDFVIEWER
    repository = DEFAULT_REPOSITORY

    if ( argc == 1 ):
        print( "rkv: command-line reference manager" )
        print( "database   = {:s}".format( database   ) )
        print( "language   = {:s}".format( language   ) )
        print( "pdfviewer  = {:s}".format( pdfviewer  ) )
        print( "repository = {:s}".format( repository ) )
        exit(0)
    elif ( argv[1] == "init" ):
        dbs = argv[2:argc]
        if ( len(dbs) == 0 ):
            dbs.append( database )
        for db in dbs:
            if ( os.path.isfile(db) ):
                print( "rkv: database {:s} already exists".format( db ) )
                exit(1)
            else:
                init( db )
        exit(0)

    if ( os.path.isfile(database) == False ):
        print( "rkv: database '{:s}' does not exist".format( database ) )
        answer = input( "create it (yes or no)? " )
        if ( answer.lower() == "yes" ):
            init( database )
        else:
            exit(1)

    if ( argv[1] == "add" ):
        if ( argc < 5 ):
            print( "rkv: need citation key, document type, and language" )
            exit(1)
        else:
            add( database, argv[2], argv[3], argv[4], argv[5:argc] )
    elif ( argv[1] == "find" ):
        print( "find" )
    elif ( argv[1] == "info" ):
        print( "info" )
    elif ( argv[1] == "modify" ):
        print( "modify" )
    elif ( argv[1] == "mv" ):
        print( "mv" )
    elif ( argv[1] == "rm" ):
        print( "rm" )
    else:
        print( "rkv: command {:s} is unknown".format( argv[1] ) )

    exit(0)

if __name__ == "__main__":
    main( len(sys.argv), sys.argv )
