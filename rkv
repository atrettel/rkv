#!/usr/bin/env python3

# Copyright (C) 2020 Andrew Trettel

import os.path
import sqlite3
import sys

DEFAULT_DATABASE   = "references.db"
DEFAULT_LANGUAGE   = "eng"
DEFAULT_PDFVIEWER  = "zathura"
DEFAULT_REPOSITORY = "./"

def add_citation( cursor, citation_key, document_type, language, field_pairs ):
    if ( key_exists( cursor, citation_key ) ):
        print( "rkv: citation key '{:s}' already exists".format(
            citation_key ) )
    else:
        cursor.execute( "PRAGMA foreign_keys = ON;" )
        cursor.execute(
        """
        INSERT INTO documents( citation_key, document_type, language ) VALUES(
        ?, ?, ? );
        """,
        ( citation_key, document_type, language, ) )
        print( "rkv: add '{:s}'".format( citation_key ) )

    if ( language not in list_languages_for_citation( cursor, citation_key ) ):
        for field_pair in field_pairs:
            field_type, value = split_field_pair( field_pair )
            cursor.execute(
            """
            INSERT INTO fields( citation_key, field_type, language, value )
            VALUES( ?, ?, ?, ? );
            """,
            ( citation_key, field_type, language, value, ) )
        print( "rkv: add fields for language '{:s}'".format( language ) )

def init_database( database ):
    conn = sqlite3.connect( database )
    cursor = conn.cursor()

    cursor.execute( "PRAGMA foreign_keys = ON;" )

    cursor.execute(
    """
    CREATE TABLE document_types (
    document_type  TEXT PRIMARY KEY UNIQUE,
    RIS_type       TEXT NOT NULL,
    bibtex_type    TEXT NOT NULL
    );
    """
    )

    cursor.execute( "INSERT INTO document_types VALUES( 'article', 'JOUR', 'article'    );" )
    cursor.execute( "INSERT INTO document_types VALUES( 'book',    'BOOK', 'book'       );" )
    cursor.execute( "INSERT INTO document_types VALUES( 'report',  'RPRT', 'techreport' );" )

    cursor.execute(
    """
    CREATE TABLE documents (
    citation_key  TEXT PRIMARY KEY UNIQUE,
    document_type TEXT NOT NULL,
    language      TEXT NOT NULL,
    notes         TEXT DEFAULT NULL,
    FOREIGN KEY(document_type) REFERENCES document_types(document_type)
    );
    """
    )

    cursor.execute(
    """
    CREATE TABLE fields (
    citation_key TEXT NOT NULL,
    field_type   TEXT NOT NULL,
    language     TEXT NOT NULL,
    value        TEXT NOT NULL,
    PRIMARY KEY(citation_key, field_type, language),
    FOREIGN KEY(citation_key) REFERENCES documents(citation_key)
    );
    """
    )

    cursor.execute(
    """
    CREATE TABLE dates (
    citation_key TEXT NOT NULL,
    date_type    TEXT DEFAULT NULL,
    year         INTEGER NOT NULL,
    month        INTEGER DEFAULT NULL,
    day          INTEGER DEFAULT NULL,
    PRIMARY KEY(citation_key, date_type),
    FOREIGN KEY(citation_key) REFERENCES documents(citation_key)
    );
    """
    )

    conn.commit()
    conn.close()

    print( "rkv: initialized {:s}". format( database ) )

def key_exists( cursor, citation_key ):
    cursor.execute(
    """
    SELECT citation_key FROM documents WHERE citation_key=?;
    """,
    ( citation_key, ) )
    result = cursor.fetchone()
    return ( result != None )

def list_languages_for_citation( cursor, citation_key ):
    cursor.execute(
    """
    SELECT DISTINCT language FROM fields WHERE citation_key=? ORDER BY
    language;
    """,
    ( citation_key, ) )
    result = cursor.fetchone()
    if ( result == None ):
        return []
    else:
        return list(result)

def main( argc, argv ):
    database   = DEFAULT_DATABASE
    language   = DEFAULT_LANGUAGE
    pdfviewer  = DEFAULT_PDFVIEWER
    repository = DEFAULT_REPOSITORY

    if ( argc == 1 ):
        print( "rkv: command-line reference manager" )
        print( "database   = {:s}".format( database   ) )
        print( "language   = {:s}".format( language   ) )
        print( "pdfviewer  = {:s}".format( pdfviewer  ) )
        print( "repository = {:s}".format( repository ) )
        exit(0)
    elif ( argv[1] == "init" ):
        db = database
        if ( argc > 2 ):
            db = argv[2]
        print( db )
        if ( os.path.isfile(db) ):
            print( "rkv: database {:s} already exists".format( db ) )
            exit(1)
        else:
            init_database( db )
        exit(0)

    conn   = sqlite3.connect( database )
    cursor = conn.cursor()
    cursor.execute( "PRAGMA foreign_keys = ON;" )

    if ( argv[1] == "add" ):
        if ( argc < 5 ):
            print( "rkv: need citation key, document type, and language" )
            conn.commit()
            conn.close()
            exit(1)
        else:
            add_citation( cursor, argv[2], argv[3], argv[4], argv[5:argc] )
    elif ( argv[1] == "find" ):
        print( "find" )
    elif ( argv[1] == "info" ):
        print( "info" )
    elif ( argv[1] == "modify" ):
        print( "modify" )
    elif ( argv[1] == "mv" ):
        print( "mv" )
    elif ( argv[1] == "rm" ):
        print( "rm" )
    else:
        print( "rkv: command {:s} is unknown".format( argv[1] ) )

    conn.commit()
    conn.close()
    exit(0)

def split_field_pair( field_pair ):
    i = 0
    n = len(field_pair)
    while ( i < n and field_pair[i] != ":" ):
        i += 1
    field_type = field_pair[0:i]
    if ( i == n ):
        value = ""
    else:
        value = field_pair[i+1:]

    return field_type, value

if __name__ == "__main__":
    main( len(sys.argv), sys.argv )
